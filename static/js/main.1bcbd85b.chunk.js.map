{"version":3,"sources":["layouts/Page/Page.js","components/ChannelsList/ChannelsList.js","components/Message/Message.js","constants/index.js","http/index.js","actions/actionCreators.js","actions/actionTypes.js","components/MessagesList/MessagesList.js","components/MessageEditForm/MessageEditForm.js","components/MessageArea/MessageArea.js","pages/Chats/Chats.js","App.js","serviceWorker.js","reducers/channels.js","reducers/messages.js","store/index.js","index.js","layouts/Page/Page.module.css"],"names":["Page","sidebar","main","className","styles","container","ChannelsList","Message","item","onEdit","onResend","onDelete","status","onClick","id","removed","content","client","axios","create","baseURL","process","messagesFetch","dispatch","getState","a","lastSeenId","messages","list","type","payload","get","params","data","items","error","messageDelete","messagesDeleteRequest","delete","messagesDeleteSuccess","messagesDeleteFailure","e","messagesSaveMessage","messagesMessageStatusChange","messageSave","itemToSave","nanoid","created","Date","now","post","console","log","MessagesList","useSelector","state","loading","useDispatch","useEffect","setTimeout","clearTimeout","handleEdit","messageEdit","handleResend","handleDelete","map","o","key","MessageEditForm","edit","inputRef","current","focus","scrollIntoView","behaviour","block","length","useRef","onSubmit","evt","preventDefault","ref","onChange","value","target","MessageArea","Chats","App","Boolean","window","location","hostname","match","initialListState","channelsReducer","combineReducers","initialEditState","messagesReducer","action","last","ids","filter","includes","existing","find","undefined","reducer","channels","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.1bcbd85b.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './Page.module.css'\n\nexport default function Page({sidebar, main}) {\n    return (\n        <div className={styles.container}>\n            <div className={styles.sidebar}>\n                {sidebar}\n            </div>\n            <div className={styles.main}>\n                {main}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function ChannelsList() {\n    return (\n        <div>\n            ChannelsList\n        </div>\n    )\n}\n","import React from 'react';\nimport { MESSAGE_STATUS_FAIL, MESSAGE_STATUS_SENT } from '../../constants';\n\n// Переиспользуемый компонент, не должен лазить в state\nexport default function Message({ item, onEdit, onResend, onDelete }) {\n    const handleEdit = () => {\n        onEdit(item);\n    };\n\n    const handleResend = () => {\n        onResend(item);\n    };\n\n    const handleDelete = () => {\n        onDelete(item.id);\n    }\n\n    return (\n        <div>\n            {item.status === MESSAGE_STATUS_SENT && <button onClick={handleEdit}>✎</button>}\n            {item.status === MESSAGE_STATUS_FAIL && <button onClick={handleResend}>🗘</button>}\n            <button onClick={handleDelete}>delete</button>\n            <p>\n                {!item.removed && item.content}\n            </p>\n            <p>\n                {!item.removed && item.id}\n            </p>\n            <p>\n                {!item.removed && item.status}\n            </p>\n        </div>\n    )\n}\n","export const MESSAGE_STATUS_PENDING = 'MESSAGE_STATUS_PENDING';\nexport const MESSAGE_STATUS_SENT = 'MESSAGE_STATUS_SENT';\nexport const MESSAGE_STATUS_FAIL = 'MESSAGE_STATUS_FAIL';","import axios from 'axios';\n\n// process.env.PORT\nconst client = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    // TODO: specify other settings\n});\n\nexport default client; // index.js -> import client from http;","import { MESSAGE_CHANGE, MESSAGE_SAVE_REQUEST, MESSAGE_SAVE_SUCCESS, MESSAGE_SAVE_FAILURE, MESSAGES_SAVE_MESSAGE, MESSAGES_MESSAGE_STATUS_CHANGE, MESSAGE_EDIT, MESSAGES_FETCH_REQUEST, MESSAGES_FETCH_SUCCESS, MESSAGES_FETCH_FAILURE, MESSAGES_DELETE_REQUEST, MESSAGES_DELETE_FAILURE, MESSAGES_DELETE_SUCCESS } from \"./actionTypes\";\nimport nanoid from 'nanoid';\nimport { MESSAGE_STATUS_SENT, MESSAGE_STATUS_FAIL, MESSAGE_STATUS_PENDING } from \"../constants\";\nimport client from '../http'; // index.js писать не нужно\n\nexport const messagesFetchRequest = () => {\n    return {\n        type: MESSAGES_FETCH_REQUEST,\n        payload: {}\n    }\n}\nexport const messagesFetchSuccess = items => {\n    return {\n        type: MESSAGES_FETCH_SUCCESS,\n        payload: { items }\n    }\n}\nexport const messagesFetchFailure = error => {\n    return {\n        type: MESSAGES_FETCH_FAILURE,\n        payload: { error }\n    }\n}\n// 1. Вариант - попросить lastSeenId в параметры\n// 2. Вариант - вытаскивать из store\nexport const messagesFetch = () => async (dispatch, getState) => {\n    const { lastSeenId } = getState().messages.list;\n    dispatch(messagesFetchRequest())\n    try {\n        const { data } = await client.get('/messages', { params: { lastSeenId } }); // теперь .json() или JSON.parse() делать не нужно\n        dispatch(messagesFetchSuccess(data)); // response - целиком ответ, data - данные тела\n    } catch (e) {\n        dispatch(messagesFetchFailure(e));\n    }\n}\n\nexport const messageDelete = async (dispatch, id) => {\n    dispatch(messagesDeleteRequest());\n    try {\n        await client.delete(`/messages/${id}`);\n        dispatch(messagesDeleteSuccess(id));\n    } catch (e) {\n        dispatch(messagesDeleteFailure(e));\n    }\n}\n\n// await client.post('/messages', itemToSave); // теперь .json() или JSON.parse() делать не нужно\n// dispatch(messagesMessageStatusChange(itemToSave.id, MESSAGE_STATUS_SENT));\n\nexport const messagesDeleteRequest = () => {\n    return {\n        type: MESSAGES_DELETE_REQUEST,\n        payload: {}\n    }\n}\n\nexport const messagesDeleteFailure = e => {\n    return {\n        type: MESSAGES_DELETE_FAILURE,\n        payload: { e }\n    }\n}\n\nexport const messagesDeleteSuccess = id => {\n    return {\n        type: MESSAGES_DELETE_SUCCESS,\n        payload: {\n            id,\n        }\n    }\n}\n\nexport const messagesSaveMessage = item => {\n    return {\n        type: MESSAGES_SAVE_MESSAGE,\n        payload: { item },\n    }\n}\n\nexport const messagesMessageStatusChange = (id, status) => {\n    return {\n        type: MESSAGES_MESSAGE_STATUS_CHANGE,\n        payload: { id, status },\n    }\n}\n\nexport const messageEdit = item => {\n    return {\n        type: MESSAGE_EDIT,\n        payload: { item }\n    };\n}\n\nexport const messageChange = ({ content }) => {\n    return {\n        type: MESSAGE_CHANGE,\n        payload: { content }\n    };\n}\n\nexport const messageSaveRequest = () => {\n    return {\n        type: MESSAGE_SAVE_REQUEST,\n        payload: {}\n    }\n}\n\nexport const messageSaveSuccess = () => {\n    return {\n        type: MESSAGE_SAVE_SUCCESS,\n        payload: {}\n    }\n}\n\nexport const messageSaveFailure = error => {\n    return {\n        type: MESSAGE_SAVE_FAILURE,\n        payload: {\n            error\n        }\n    }\n}\n\n// thunk:\n// action creator = (аргументы) => (dispatch, getState) => { ... }\n\n//export const messageSave = async (dispatch, item) => {\nexport const messageSave = item => async dispatch => {\n    dispatch(messageSaveRequest()); // SAVE_REQUEST\n\n    const itemToSave = {\n        ...item,\n        id: item.id === '' ? nanoid() : item.id, // item.id || nanoid()\n        status: MESSAGE_STATUS_PENDING,\n        created: Date.now(),\n    }; // Date - built-in class, static method\n    dispatch(messagesSaveMessage(itemToSave));\n\n    /* вместо\n    try {\n        const response = await fetch();\n        if (!response.ok) {\n            throw new Error();\n        }\n        const data = response.json();\n    } catch (e) {\n        console.log(e);\n    }\n    */\n\n    // с axios\n    try {\n        await client.post('/messages', itemToSave); // теперь .json() или JSON.parse() делать не нужно\n        dispatch(messagesMessageStatusChange(itemToSave.id, MESSAGE_STATUS_SENT));\n    } catch (e) {\n        console.log(e);\n        dispatch(messagesMessageStatusChange(itemToSave.id, MESSAGE_STATUS_FAIL));\n    }\n}","export const CHANNELS_REQUEST = 'CHANNELS_REQUEST';\nexport const CHANNELS_FAILURE = 'CHANNELS_FAILURE';\nexport const CHANNELS_SUCCESS = 'CHANNELS_SUCCESS';\n\nexport const MESSAGES_FETCH_REQUEST = 'MESSAGES_FETCH_REQUEST';\nexport const MESSAGES_FETCH_FAILURE = 'MESSAGES_FETCH_FAILURE';\nexport const MESSAGES_FETCH_SUCCESS = 'MESSAGES_FETCH_SUCCESS';\n\nexport const MESSAGES_SAVE_MESSAGE = 'MESSAGES_SAVE_MESSAGE';\nexport const MESSAGES_MESSAGE_STATUS_CHANGE = 'MESSAGES_MESSAGE_STATUS_CHANGE';\n\nexport const MESSAGE_EDIT = 'MESSAGE_EDIT';\nexport const MESSAGE_CHANGE = 'MESSAGE_CHANGE';\nexport const MESSAGE_DELETE = 'MESSAGE_DELETE';\nexport const MESSAGES_DELETE_REQUEST = 'MESSAGES_DELETE_REQUEST';\nexport const MESSAGES_DELETE_SUCCESS = 'MESSAGES_DELETE_SUCCESS';\nexport const MESSAGES_DELETE_FAILURE = 'MESSAGES_DELETE_FAILURE';\n\nexport const MESSAGE_SAVE_REQUEST = 'MESSAGE_SAVE_REQUEST';\nexport const MESSAGE_SAVE_FAILURE = 'MESSAGE_SAVE_FAILURE';\nexport const MESSAGE_SAVE_SUCCESS = 'MESSAGE_SAVE_SUCCESS';\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../Message/Message';\nimport { messageEdit, messageSave, messagesFetch, messageDelete } from '../../actions/actionCreators';\nimport { useEffect } from 'react';\n\nexport default function MessagesList() {\n    const { items, loading } = useSelector(state => state.messages.list);\n    const dispatch = useDispatch(); // react-redux - dispatch - никогда не меняется\n\n    useEffect(() => {\n        dispatch(messagesFetch()); // first load (не ждём секунду)\n    }, [dispatch]);\n\n    useEffect(() => {\n        // subscriptions (подписки)\n        // Не использовать setInterval - если ответы будут медленными, то можно перетереть данные\n        // const id = setInterval(() => {\n        //     dispatch(messagesFetch());\n        // }, 5000);\n        // всегда возвращаем функцию unsubscribe (отписка)\n        // return () => clearInterval(id);\n        let id = 0;\n        if (loading === false) {\n            id = setTimeout(() => {\n                dispatch(messagesFetch());\n            }, 1000);\n            return () => clearTimeout(id);\n        }\n    }, [dispatch, loading]); // dispatch - deps (всё, что используем снаружи)\n\n    const handleEdit = item => {\n        dispatch(messageEdit(item));\n    };\n\n    const handleResend = item => {\n        messageSave(dispatch, item);\n    };\n\n    const handleDelete = id => {\n        messageDelete(dispatch, id);\n    };\n\n    return (\n        <div>\n            <ul>\n                {items.map(o => <li key={o.id}>\n                    <Message item={o} onEdit={handleEdit} onResend={handleResend} onDelete={handleDelete} />\n                </li>)}\n            </ul>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { messageChange, messageSave } from '../../actions/actionCreators';\nimport { useEffect } from 'react';\nimport { useRef } from 'react';\n\nexport default function MessageEditForm() {\n    // react-redux:\n    // - useSelector -> позволяет выбирать кусочек state\n    // - useDispatch -> позволяет получать dispatch\n    const { item } = useSelector(state => state.messages.edit);\n    // const { loading : loadingList } = useSelector(state => state.messages.list);\n    const { items } = useSelector(state => state.messages.list);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        console.log(inputRef);\n        inputRef.current.focus();\n    }, []);\n\n    useEffect(() => {\n        setTimeout(() => {\n            inputRef.current.scrollIntoView({\n            behaviour: 'smooth',\n            block: 'end'\n        });\n        }, 1000);\n        // if (loadingList === true) {\n        //     return;\n        // }\n        \n    }, [items.length])\n\n    const inputRef = useRef(null);\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        // messageSave(dispatch, item);\n        dispatch(messageSave(item)); // благодаря redux thunk\n    };\n\n    const handleChange = evt => {\n        const { value } = evt.target;\n        dispatch(messageChange({ content: value }));\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input ref={inputRef} onChange={handleChange} value={item.content} />\n            <button>Ok</button>\n        </form>\n    )\n}\n\n\n\n\n\n","import React from 'react'\nimport MessagesList from '../MessagesList/MessagesList';\nimport MessageEditForm from '../MessageEditForm/MessageEditForm';\n\nexport default function MessageArea() {\n    return (\n        <div>\n            <MessagesList />\n            <MessageEditForm />\n        </div>\n    )\n}\n","import React from 'react'\nimport Page from '../../layouts/Page/Page'\nimport ChannelsList from '../../components/ChannelsList/ChannelsList'\nimport MessageArea from '../../components/MessageArea/MessageArea'\n\nexport default function Chats() {\n    return (\n        <Page\n            sidebar={<ChannelsList />}\n            main={<MessageArea />}\n        />\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Chats from './pages/Chats/Chats';\n\nfunction App() {\n  return (\n    <Chats />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\n\nconst initialListState = {\n    items: [],\n    loading: false,\n    error: null,\n};\n\n// state <- list\nexport function channelsListReducer(state = initialListState, action) {\n    return state;\n}\n\n/*\nchannels: {\n    list: { <- channelsListReducer\n        items: [],\n        loading: false,\n        error: null,\n    },\n    edit: { <- channelEditReducer\n        item: {...},\n        loading: false,\n        error: null,\n    }\n}\n*/\n\nconst channelsReducer = combineReducers({\n    list: channelsListReducer,\n    // edit: channelEditReducer,\n});\n\nexport default channelsReducer;","import { combineReducers } from \"redux\";\nimport { MESSAGE_CHANGE, MESSAGE_SAVE_REQUEST, MESSAGES_SAVE_MESSAGE, MESSAGES_MESSAGE_STATUS_CHANGE, MESSAGE_EDIT, MESSAGES_FETCH_REQUEST, MESSAGES_FETCH_SUCCESS, MESSAGES_FETCH_FAILURE, MESSAGES_DELETE_REQUEST, MESSAGES_DELETE_SUCCESS } from \"../actions/actionTypes\";\nimport { MESSAGE_STATUS_PENDING } from \"../constants\";\n\nconst initialListState = {\n    items: [],\n    loading: false,\n    error: null,\n    lastSeenId: '', // какой последний id мы видели\n};\n\n// state <- list\nexport function messagesListReducer(state = initialListState, action) {\n    // TODO: handle action\n    switch (action.type) {\n        // action проходит через все reducer'ы (можно сделать и так, но это часто приводит к ошибкам)\n        // case MESSAGE_SAVE_SUCCESS: {\n        //     console.log('received');\n        // }\n        case MESSAGES_FETCH_REQUEST: {\n            return { ...state, loading: true, error: null };\n        }\n        case MESSAGES_FETCH_SUCCESS: {\n            const { items } = action.payload;\n            const ids = items.map(o => o.id);\n            let last;\n            if (items.length !== 0) {\n                last = items[items.length - 1];\n            }\n            const lastSeenId = ((last && last.id) || state.lastSeenId); // только для собеседования\n            // 1. Не добавлять те элементы, которые уже есть\n            // 2. Сделать удаление (пусть автоматически у других не удаляется) - удаляется только у вас\n            console.log(items);\n            return { ...state, items: [...state.items.filter(o => !ids.includes(o.id)), ...items], loading: false, error: null, lastSeenId }; // TODO: Заменять всё плохо\n        }\n        case MESSAGES_FETCH_FAILURE: {\n            const { error } = action.payload;\n            return { ...state, loading: false, error };\n        }\n        case MESSAGES_SAVE_MESSAGE: {\n            const { item } = action.payload;\n            // TODO: handle edit of existing item\n            const existing = state.items.find(o => o.id === item.id);\n            if (existing === undefined) {\n                return { ...state, items: [...state.items, item] };\n            }\n            return { ...state, items: state.items.map(o => o.id === item.id ? item : o) };\n        }\n        case MESSAGES_MESSAGE_STATUS_CHANGE: {\n            const { id, status } = action.payload;\n            return { ...state, items: state.items.map(o => o.id === id ? { ...o, status } : o) };\n        }\n        case MESSAGES_DELETE_REQUEST: {\n            return { ...state, loading: true, error: null };\n        }\n        case MESSAGES_DELETE_SUCCESS:\n            return { ...state, items: state.items.filter(o => o.id !== action.payload.id) }\n        default:\n            return state;\n    }\n\n}\n\nconst initialEditState = {\n    item: {\n        id: '',\n        content: '',\n        // type <- TODO: file uploading\n        status: MESSAGE_STATUS_PENDING,\n        created: 0,\n        removed: false,\n    },\n    loading: false,\n    error: null,\n}\n\n// 1. Status Component -> часики, галочка, воскл.знак\n// 2. Если воскл.знак - тогда должна появиться кнопка Resend\n// 3. Из формы вырезать всё ненужное\n// 4. Добавить кнопку редактирования\n// 5. Оформить сообщения\n\n// state <- edit\nexport function messageEditReducer(state = initialEditState, action) {\n    switch (action.type) {\n        case MESSAGE_EDIT: {\n            const { item } = action.payload;\n            return { ...state, item };\n        }\n        case MESSAGE_CHANGE: {\n            const { content } = action.payload;\n            return { ...state, item: { ...state.item, content } };\n        }\n        case MESSAGE_SAVE_REQUEST: {\n            // сразу вычищаем поле ввода как в Telegram\n            return { item: { ...initialEditState.item }, loading: true, error: null };\n        }\n        default:\n            return state;\n    }\n}\n\n\n\n/*\nmessages: {\n    list: { <- messagesListReducer\n        items: [],\n        loading: false,\n        error: null,\n    },\n    edit: { <- messageEditReducer\n        item: {...},\n        loading: false,\n        error: null,\n    }\n}\n*/\n\nconst messagesReducer = combineReducers({\n    list: messagesListReducer,\n    edit: messageEditReducer,\n});\n\nexport default messagesReducer;","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\nimport channelsReducer from \"../reducers/channels\";\nimport messagesReducer from \"../reducers/messages\";\nimport thunk from \"redux-thunk\";\n\n/*\nstate = { <- reducer\n    channels <- channelsReducer\n    messages <- messageReducer\n    auth <- authReducer\n}\n*/\n\nconst reducer = combineReducers({\n    channels: channelsReducer,\n    messages: messagesReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer,\n    // включает Redux Dev Tools\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","import {Provider} from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// index.js - специальное назначение - импортируется по умолчанию, когда вы указываете папку\nimport store from './store'; // index.js из него возьмётся default export\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Page_container__1Ygh4\",\"scrollY\":\"Page_scrollY__2nhdZ\",\"sidebar\":\"Page_sidebar__tlHfx Page_scrollY__2nhdZ\",\"main\":\"Page_main__M36wb Page_scrollY__2nhdZ\"};"],"sourceRoot":""}